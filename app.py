import streamlit as st
from youtube_transcript_api import YouTubeTranscriptApi, TranscriptsDisabled, NoTranscriptFound, VideoUnavailable
import requests

# Function to read API key from file
def read_api_key(path="api.txt"):
    try:
        with open(path, "r") as f:
            return f.read().strip()
    except Exception:
        return None

# Function to extract video ID from URL
def extract_video_id(url):
    import re
    # Handle various YouTube URL formats
    patterns = [
        r"youtu\.be/([^?&]+)",
        r"youtube\.com/watch\?v=([^?&]+)",
        r"youtube\.com/embed/([^?&]+)",
        r"youtube\.com/v/([^?&]+)"
    ]
    for pattern in patterns:
        match = re.search(pattern, url)
        if match:
            return match.group(1)
    return None

# Function to fetch transcript with diagnostics
def fetch_transcript(video_id):
    try:
        transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)
        # Debug: list all available transcripts using public API
        print("Available transcripts:")
        for t in transcript_list:
            print(f" - Language: {t.language_code}, Generated: {t.is_generated}, Translation: {t.is_translatable}")

        # Try to fetch a manually created transcript first
        manual_transcript = None
        for t in transcript_list:
            if not t.is_generated:
                manual_transcript = t
                break

        if manual_transcript:
            print(f"Fetching manual transcript in language: {manual_transcript.language_code}")
            fetched = manual_transcript.fetch()
            return " ".join([entry.text for entry in fetched])

        # If no manual transcript, try to fetch an autogenerated one
        auto_transcript = None
        for t in transcript_list:
            if t.is_generated:
                auto_transcript = t
                break

        if auto_transcript:
            print(f"Fetching auto-generated transcript in language: {auto_transcript.language_code}")
            fetched = auto_transcript.fetch()
            return " ".join([entry.text for entry in fetched])

        # No transcripts found
        print("No transcripts found (manual or auto-generated).")
        return None

    except (TranscriptsDisabled, NoTranscriptFound):
        print("Transcript disabled or not found.")
        return None
    except VideoUnavailable:
        print("Video unavailable.")
        return None
    except Exception as e:
        print(f"Unexpected error fetching transcript: {e}")
        return None

# Function to summarize transcript using OpenRouter
def summarize_transcript(api_key, transcript_text):
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    prompt = f"Given the following video transcript, extract the key takeaways as concise bullet points:\n\n{transcript_text}"
    data = {
        "model": "openrouter/quasar-alpha",
        "messages": [
            {"role": "user", "content": prompt}
        ]
    }
    try:
        response = requests.post(url, headers=headers, json=data, timeout=60)
        response.raise_for_status()
        result = response.json()
        return result['choices'][0]['message']['content']
    except Exception:
        return "Error: Failed to get summary from OpenRouter."

# Streamlit UI
st.title("YouTube Video Key Takeaways Summarizer")

youtube_url = st.text_input("Enter YouTube URL:")
if st.button("Grab Transcript"):
    st.info("Processing... please wait.")
    api_key = read_api_key()
    if not api_key:
        st.error("API key not found. Please ensure api.txt exists with your OpenRouter API key.")
    else:
        video_id = extract_video_id(youtube_url)
        if not video_id:
            st.error("Invalid YouTube URL.")
        else:
            transcript = fetch_transcript(video_id)
            if not transcript:
                st.error("Transcript not available for this video.")
            else:
                summary = summarize_transcript(api_key, transcript)
                st.subheader("Key Takeaways:")
                st.markdown(summary)